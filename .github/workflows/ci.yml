name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop, claude/* ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint:
    name: Lint Scripts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install ShellCheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Run ShellCheck on all shell scripts
        run: |
          find . -name "*.sh" -type f -exec shellcheck {} +

      - name: Check bash syntax
        run: |
          for script in *.sh; do
            if [ -f "$script" ]; then
              echo "Checking $script..."
              bash -n "$script" || exit 1
            fi
          done

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Make scripts executable
        run: chmod +x *.sh

      - name: Run tests
        run: |
          if [ -f test_guessinggame.sh ]; then
            ./test_guessinggame.sh
          else
            echo "No test script found, skipping tests"
          fi

      - name: Test help command
        run: |
          ./guessinggame.sh --help

      - name: Test version command
        run: |
          ./guessinggame.sh --version

  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Make scripts executable
        run: chmod +x *.sh

      - name: Run build script
        run: |
          ./makefile.sh

      - name: Verify README was generated
        run: |
          if [ ! -f README.md ]; then
            echo "ERROR: README.md was not generated!"
            exit 1
          fi
          echo "README.md successfully generated"

      - name: Display README info
        run: |
          echo "README.md has $(wc -l < README.md) lines"
          echo "README.md has $(wc -w < README.md) words"

      - name: Upload README artifact
        uses: actions/upload-artifact@v4
        with:
          name: generated-readme
          path: README.md
          retention-days: 30

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        bash-version: ['4.4', '5.0', '5.1', '5.2']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bash ${{ matrix.bash-version }}
        run: |
          echo "Testing with Bash version: $(bash --version | head -n 1)"

      - name: Make scripts executable
        run: chmod +x *.sh

      - name: Test game script functionality
        run: |
          # Test that the script accepts input properly
          echo "3" | timeout 5 ./guessinggame.sh --max 1 || true
          echo "Script executed successfully"

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        run: |
          # Check for common security issues in shell scripts
          echo "Checking for hardcoded secrets..."
          if grep -r -i "password\s*=\|api[_-]key\s*=\|secret\s*=" *.sh; then
            echo "WARNING: Potential hardcoded credentials found!"
            exit 1
          fi
          echo "No obvious security issues found"

      - name: Check file permissions
        run: |
          # Ensure scripts don't have world-writable permissions
          find . -name "*.sh" -perm /o+w -exec echo "WARNING: {} is world-writable" \; -exec ls -l {} \;

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Count lines of code
        run: |
          echo "=== Code Statistics ==="
          echo "Total lines in shell scripts:"
          find . -name "*.sh" -exec wc -l {} + | tail -1
          echo ""
          echo "Lines per script:"
          wc -l *.sh

      - name: Check for TODO/FIXME comments
        run: |
          echo "=== TODOs and FIXMEs ==="
          grep -r -n "TODO\|FIXME" *.sh || echo "No TODOs or FIXMEs found"

      - name: Check documentation coverage
        run: |
          echo "=== Documentation Check ==="
          if [ -f README.md ]; then
            echo "✓ README.md exists"
          else
            echo "✗ README.md missing"
            exit 1
          fi
          if [ -f LICENSE ]; then
            echo "✓ LICENSE exists"
          else
            echo "✗ LICENSE missing"
          fi

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [build, test, integration]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download README artifact
        uses: actions/download-artifact@v4
        with:
          name: generated-readme

      - name: Display deployment message
        run: |
          echo "Documentation would be deployed here in production"
          echo "README.md is ready for deployment"
